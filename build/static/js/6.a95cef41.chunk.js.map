{"version":3,"sources":["Components/Movies/MovieRows/MovieRows.js","Components/Movies/Banner/Banner.js","Components/Movies/Movies.js"],"names":["MoviesRow","title","handleAPI","setSearchTerm","useState","movies","setMovies","pathname","useLocation","useEffect","a","instance","get","catch","err","console","log","response","refinedMovies","data","results","filter","movie","poster_path","undefined","slice","fetchMovies","Fragment","className","map","onClick","to","id","loading","src","img_api","poster","alt","name","original_title","date","release_date","first_air_date","Date","getFullYear","line","element","containerClassName","truncateText","text","tagline","overview","Rating","value","vote_average","precision","icon","fontSize","readOnly","numeral","format","Banner","string","num","setMovie","requests","upcomingMovies","backdrop_path","Math","floor","random","length","fetchData","style","backgroundImage","backdrop","original_name","substr","maxWidth","height","display","alignItems","justifyContent","Movies","trendingMovies","popularMovies","topRatedMovies","comedyMovies","actionMovies","romanticMovies","crimeMovies","horrorMovies","documentaryMovies","Adventuremovies","AnimationMovies","DramaMovies","FamilyMovies","MusicMovies","MysteryMovies","ThrillerMovies","WarMovies","WesternMovies"],"mappings":"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","file":"static/js/6.a95cef41.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { instance, img_api } from \"../../../Api/axios\";\nimport \"./MovieRows.css\";\nimport { Link } from \"react-router-dom\";\nimport {\n  animationTitle,\n  transitionTitle,\n  animationPosters,\n  transitionPosters,\n} from '../../animations/row';\nimport { useLocation } from \"react-router-dom\";\nimport StarRoundedIcon from \"@material-ui/icons/StarRounded\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport TextTruncate from \"react-text-truncate\";\nimport numeral from \"numeral\";\n// import { useHorizontalScroll } from \"../useHorizontalScroll\";\n\nconst MoviesRow = ({ title, handleAPI, setSearchTerm }) => {\n  const [movies, setMovies] = useState([]);\n  const { pathname } = useLocation();\n  const base_url = 'https://image.tmdb.org/t/p/original/';\n\n  // const scrollRef = useHorizontalScroll();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await instance.get(handleAPI).catch((err) => {\n        console.log(\"MovieRow Error\", err.response);\n      });\n\n      // refinedMovies removes all the movie objects with broken image files\n      // and slices the array to render 10 working movie objects\n      const refinedMovies = response.data.results\n        .filter((movie) => {\n          return movie?.poster_path !== null || \"\" || undefined;\n        })\n        .slice(0, 10);\n\n      setMovies(refinedMovies);\n      return response;\n    };\n\n    fetchMovies();\n  }, [handleAPI]);\n\n  const getReleaseYear = (date) => {\n    let year = new Date(date);\n    return year.getFullYear(pathname);\n  }\n  \nconsole.log(movies, \"MOQDWJQPWOHDIQWGDQWDHQBWKJ\")\n\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <h2 className=\"row__title\">{title}</h2>\n        {/* <div\n          className=\"row__posters\"\n          // ref={scrollRef}\n        >\n          {movies &&\n            movies.map((movie) => {\n              return (\n                <div\n                  key={movie.id}\n                  className=\"row__movie\"\n                  onClick={() => setSearchTerm(\"\")}\n                >\n                  <Link to={`/movie/${movie.id}`}>\n                    <img\n                      src={img_api.poster + movie?.poster_path}\n                      alt={movie.title}\n                      className=\"row__poster\"\n                    />\n                  </Link>\n                </div>\n              );\n            })}\n        </div> */}\n            <div className=\"row__posters list__items\" >\n        {movies.map((movie) => (\n                <div\n                key={movie.id}\n                className=\"list__item\"\n                onClick={() => setSearchTerm(\"\")}\n              >\n                <Link to={`/movie/${movie.id}`}>\n            <img\n              loading=\"lazy\"\n              key={movie.id}\n              className={`row__poster`}\n              src={img_api.poster + movie?.poster_path}\n              alt={movie.name}\n            />\n            <div className=\"list__itemInfo\">\n              <h5 className=\"list__itemTitle\">\n                {movie.name || movie.original_title}\n                <span className=\"list__itemYear\">\n                  ({getReleaseYear(movie.release_date || movie.first_air_date)})\n                </span>\n              </h5>\n              <TextTruncate\n                line={2}\n                element=\"p\"\n                containerClassName=\"list__itemOverview\"\n                truncateText=\"â€¦\"\n                text={movie.tagline || movie.overview}\n              />\n              <div className=\"list__rating\">\n                <Rating\n                  name=\"movie-rating\"\n                  className=\"movieRating\"\n                  value={movie.vote_average / 2 || 0}\n                  precision={0.5}\n                  icon={<StarRoundedIcon fontSize=\"inherit\" readOnly />}\n                />\n                <small className=\"list__likes\">\n                  {numeral(movie.vote_average / 2).format(\"0.0\")}\n                </small>\n              </div>\n            </div>\n            </Link>\n          </div>\n        ))}\n      </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default MoviesRow;\n\n// <div>\n// {movies &&\n//   movies.map((movie) => {\n//     return (\n//       <div key={movie.id} onClick={() => setSearchTerm(\"\")}>\n//         <Link to={`/movie/${movie.id}`}>\n//           <img\n//             src={img_api.poster + movie?.poster_path}\n//             alt={movie.title}\n//           />\n//         </Link>\n//       </div>\n//     );\n//   })}\n// </div>\n\n// <React.Fragment>\n// <div className=\"row\">\n//   <h2 className=\"row__title\">{title}</h2>\n//   <div className=\"row__posters\">\n//     {movies &&\n//       movies.map((movie) => {\n//         return (\n//           <div\n//             key={movie.id}\n//             className=\"row__movie\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             <Link to={`/movie/${movie.id}`}>\n//               <img\n//                 src={img_api.poster + movie?.poster_path}\n//                 alt={movie.title}\n//                 className=\"row__poster\"\n//               />\n//             </Link>\n//           </div>\n//         );\n//       })}\n//   </div>{\" \"}\n// </div>\n// </React.Fragment>","import React, { useState, useEffect } from \"react\";\nimport { requests, instance, img_api } from \"../../../Api/axios\";\nimport \"./Banner.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await instance\n        .get(requests.upcomingMovies)\n        .catch((err) => {\n          console.log(\"Banner Error\", err.response);\n        });\n\n      // refinedMovies removes all the movie objects with broken image files,\n      // and selects a random movie to display\n      const refinedMovies = response?.data?.results.filter((movie) => {\n        return movie?.backdrop_path !== null || \"\" || undefined;\n      });\n\n      setMovie(refinedMovies[Math.floor(Math.random() * refinedMovies.length)]);\n      return response;\n    };\n    fetchData();\n  }, []);\n\n  //Function truncates the movie overview to max 150 characters\n  const truncate = (string, num) => {\n    return string?.length > num ? string.substr(0, num - 1) + \"...\" : string;\n  };\n\n  return (\n    <React.Fragment>\n      \n      {movie?.backdrop_path ? (\n        <header\n          className=\"banner\"\n          style={{\n            backgroundImage: `linear-gradient(0deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.1) 100%), \n                 url(${img_api?.backdrop}${movie?.backdrop_path})`,\n          }}\n        >\n          <div className=\"banner__contents\">\n            <h1 className=\"banner__title\">\n              {movie?.title || movie?.original_name || movie?.name}\n            </h1>\n            <Link to={`/movie/${movie.id}`}>\n              <button className=\"banner__button\">Details</button>{\" \"}\n            </Link>\n            <h1 className=\"banner__overview\">\n              {truncate(movie.overview, 150)}\n            </h1>\n          </div>\n          <div className=\"banner__fadeBottom \" />\n        </header>\n      ) : (\n        <div style={{ maxWidth: \"100%\", height: \"80vh\" }}>\n          <h1\n            style={{\n                height: \"80vh\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent:'center',\n            }}\n          >\n            Loading...\n          </h1>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport MoviesRow from \"./MovieRows/MovieRows\";\nimport Banner from \"./Banner/Banner\";\nimport { requests } from \"../../Api/axios\";\n\nfunction Movies({ setSearchTerm }) {\n  return (\n    <div >\n      <Banner />\n\n      <MoviesRow\n        title={\"Trending Movies\"}\n        handleAPI={requests.trendingMovies}\n        setSearchTerm={setSearchTerm}\n      />\n      <MoviesRow\n        title={\"Popular Movies\"}\n        handleAPI={requests.popularMovies}\n        setSearchTerm={setSearchTerm}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Top Rated Movies\"}\n        handleAPI={requests.topRatedMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Comedy Movies\"}\n        handleAPI={requests.comedyMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Action Movies\"}\n        handleAPI={requests.actionMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Romantic Movies\"}\n        handleAPI={requests.romanticMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Crime Movies\"}\n        handleAPI={requests.crimeMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Horror Movies\"}\n        handleAPI={requests.horrorMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Documentaries\"}\n        handleAPI={requests.documentaryMovies}\n      />\n            <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Adventure Movies\"}\n        handleAPI={requests.Adventuremovies}\n      />      <MoviesRow\n      setSearchTerm={setSearchTerm}\n      title={\"Animation Movies\"}\n      handleAPI={requests.AnimationMovies}\n    />      <MoviesRow\n    setSearchTerm={setSearchTerm}\n    title={\"Drama Movies\"}\n    handleAPI={requests.DramaMovies}\n  />      <MoviesRow\n  setSearchTerm={setSearchTerm}\n  title={\"Family Movies\"}\n  handleAPI={requests.FamilyMovies}\n/>      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Music Movies\"}\n        handleAPI={requests.MusicMovies}\n      />      <MoviesRow\n      setSearchTerm={setSearchTerm}\n      title={\"Mystery Movies\"}\n      handleAPI={requests.MysteryMovies}\n    />      <MoviesRow\n    setSearchTerm={setSearchTerm}\n    title={\"Thriller Movies\"}\n    handleAPI={requests.ThrillerMovies}\n  />      <MoviesRow\n  setSearchTerm={setSearchTerm}\n  title={\"War Movies\"}\n  handleAPI={requests.WarMovies}\n/>      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Western Movies\"}\n        handleAPI={requests.WesternMovies}\n      />\n    </div>\n  );\n}\n\nexport default Movies;\n"],"sourceRoot":""}