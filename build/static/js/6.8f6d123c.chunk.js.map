{"version":3,"sources":["Components/Movies/MovieRows/MovieRows.js","Components/Movies/Banner/Banner.js","Components/Movies/Movies.js"],"names":["MoviesRow","_ref","title","handleAPI","setSearchTerm","movies","setMovies","useState","pathname","useLocation","useEffect","async","response","instance","get","catch","err","console","log","refinedMovies","data","results","filter","movie","poster_path","undefined","slice","fetchMovies","_jsx","React","Fragment","children","_jsxs","className","map","onClick","Link","to","id","loading","src","img_api","poster","alt","name","original_title","date","release_date","first_air_date","Date","getFullYear","TextTruncate","line","element","containerClassName","truncateText","text","tagline","overview","Rating","value","vote_average","precision","icon","StarRoundedIcon","fontSize","readOnly","numeral","format","Banner","setMovie","_response$data","requests","upcomingMovies","backdrop_path","Math","floor","random","length","fetchData","style","backgroundImage","backdrop","original_name","string","num","substr","maxWidth","height","display","alignItems","justifyContent","truncate","Movies","trendingMovies","popularMovies","topRatedMovies","comedyMovies","actionMovies","romanticMovies","crimeMovies","horrorMovies","documentaryMovies","Adventuremovies","AnimationMovies","DramaMovies","FamilyMovies","MusicMovies","MysteryMovies","ThrillerMovies","WarMovies","WesternMovies"],"mappings":"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","file":"static/js/6.8f6d123c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { instance, img_api } from \"../../../Api/axios\";\nimport \"./MovieRows.css\";\nimport { Link } from \"react-router-dom\";\nimport {\n  animationTitle,\n  transitionTitle,\n  animationPosters,\n  transitionPosters,\n} from '../../animations/row';\nimport { useLocation } from \"react-router-dom\";\nimport StarRoundedIcon from \"@material-ui/icons/StarRounded\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport TextTruncate from \"react-text-truncate\";\nimport numeral from \"numeral\";\n// import { useHorizontalScroll } from \"../useHorizontalScroll\";\n\nconst MoviesRow = ({ title, handleAPI, setSearchTerm }) => {\n  const [movies, setMovies] = useState([]);\n  const { pathname } = useLocation();\n  const base_url = 'https://image.tmdb.org/t/p/original/';\n\n  // const scrollRef = useHorizontalScroll();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await instance.get(handleAPI).catch((err) => {\n        console.log(\"MovieRow Error\", err.response);\n      });\n\n      // refinedMovies removes all the movie objects with broken image files\n      // and slices the array to render 10 working movie objects\n      const refinedMovies = response.data.results\n        .filter((movie) => {\n          return movie?.poster_path !== null || \"\" || undefined;\n        })\n        .slice(0, 10);\n\n      setMovies(refinedMovies);\n      return response;\n    };\n\n    fetchMovies();\n  }, [handleAPI]);\n\n  const getReleaseYear = (date) => {\n    let year = new Date(date);\n    return year.getFullYear(pathname);\n  }\n  \nconsole.log(movies, \"MOQDWJQPWOHDIQWGDQWDHQBWKJ\")\n\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <h2 className=\"row__title\">{title}</h2>\n        {/* <div\n          className=\"row__posters\"\n          // ref={scrollRef}\n        >\n          {movies &&\n            movies.map((movie) => {\n              return (\n                <div\n                  key={movie.id}\n                  className=\"row__movie\"\n                  onClick={() => setSearchTerm(\"\")}\n                >\n                  <Link to={`/movie/${movie.id}`}>\n                    <img\n                      src={img_api.poster + movie?.poster_path}\n                      alt={movie.title}\n                      className=\"row__poster\"\n                    />\n                  </Link>\n                </div>\n              );\n            })}\n        </div> */}\n            <div className=\"row__posters list__items\" >\n        {movies.map((movie) => (\n                <div\n                key={movie.id}\n                className=\"list__item\"\n                onClick={() => setSearchTerm(\"\")}\n              >\n                <Link to={`/movie/${movie.id}`}>\n            <img\n              loading=\"lazy\"\n              key={movie.id}\n              className={`row__poster`}\n              src={img_api.poster + movie?.poster_path}\n              alt={movie.name}\n            />\n            <div className=\"list__itemInfo\">\n              <h5 className=\"list__itemTitle\">\n                {movie.name || movie.original_title}\n                <span className=\"list__itemYear\">\n                  ({getReleaseYear(movie.release_date || movie.first_air_date)})\n                </span>\n              </h5>\n              <TextTruncate\n                line={2}\n                element=\"p\"\n                containerClassName=\"list__itemOverview\"\n                truncateText=\"â€¦\"\n                text={movie.tagline || movie.overview}\n              />\n              <div className=\"list__rating\">\n                <Rating\n                  name=\"movie-rating\"\n                  className=\"movieRating\"\n                  value={movie.vote_average / 2 || 0}\n                  precision={0.5}\n                  icon={<StarRoundedIcon fontSize=\"inherit\" readOnly />}\n                />\n                <small className=\"list__likes\">\n                  {numeral(movie.vote_average / 2).format(\"0.0\")}\n                </small>\n              </div>\n            </div>\n            </Link>\n          </div>\n        ))}\n      </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default MoviesRow;\n\n// <div>\n// {movies &&\n//   movies.map((movie) => {\n//     return (\n//       <div key={movie.id} onClick={() => setSearchTerm(\"\")}>\n//         <Link to={`/movie/${movie.id}`}>\n//           <img\n//             src={img_api.poster + movie?.poster_path}\n//             alt={movie.title}\n//           />\n//         </Link>\n//       </div>\n//     );\n//   })}\n// </div>\n\n// <React.Fragment>\n// <div className=\"row\">\n//   <h2 className=\"row__title\">{title}</h2>\n//   <div className=\"row__posters\">\n//     {movies &&\n//       movies.map((movie) => {\n//         return (\n//           <div\n//             key={movie.id}\n//             className=\"row__movie\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             <Link to={`/movie/${movie.id}`}>\n//               <img\n//                 src={img_api.poster + movie?.poster_path}\n//                 alt={movie.title}\n//                 className=\"row__poster\"\n//               />\n//             </Link>\n//           </div>\n//         );\n//       })}\n//   </div>{\" \"}\n// </div>\n// </React.Fragment>","import React, { useState, useEffect } from \"react\";\nimport { requests, instance, img_api } from \"../../../Api/axios\";\nimport \"./Banner.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await instance\n        .get(requests.upcomingMovies)\n        .catch((err) => {\n          console.log(\"Banner Error\", err.response);\n        });\n\n      // refinedMovies removes all the movie objects with broken image files,\n      // and selects a random movie to display\n      const refinedMovies = response?.data?.results.filter((movie) => {\n        return movie?.backdrop_path !== null || \"\" || undefined;\n      });\n\n      setMovie(refinedMovies[Math.floor(Math.random() * refinedMovies.length)]);\n      return response;\n    };\n    fetchData();\n  }, []);\n\n  //Function truncates the movie overview to max 150 characters\n  const truncate = (string, num) => {\n    return string?.length > num ? string.substr(0, num - 1) + \"...\" : string;\n  };\n\n  return (\n    <React.Fragment>\n      \n      {movie?.backdrop_path ? (\n        <header\n          className=\"banner\"\n          style={{\n            backgroundImage: `linear-gradient(0deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.1) 100%), \n                 url(${img_api?.backdrop}${movie?.backdrop_path})`,\n          }}\n        >\n          <div className=\"banner__contents\">\n            <h1 className=\"banner__title\">\n              {movie?.title || movie?.original_name || movie?.name}\n            </h1>\n            <Link to={`/movie/${movie.id}`}>\n              <button className=\"banner__button\">Details</button>{\" \"}\n            </Link>\n            <h1 className=\"banner__overview\">\n              {truncate(movie.overview, 150)}\n            </h1>\n          </div>\n          <div className=\"banner__fadeBottom \" />\n        </header>\n      ) : (\n        <div style={{ maxWidth: \"100%\", height: \"80vh\" }}>\n          <h1\n            style={{\n                height: \"80vh\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent:'center',\n            }}\n          >\n            Loading...\n          </h1>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport MoviesRow from \"./MovieRows/MovieRows\";\nimport Banner from \"./Banner/Banner\";\nimport { requests } from \"../../Api/axios\";\n\nfunction Movies({ setSearchTerm }) {\n  return (\n    <div >\n      <Banner />\n\n      <MoviesRow\n        title={\"Trending Movies\"}\n        handleAPI={requests.trendingMovies}\n        setSearchTerm={setSearchTerm}\n      />\n      <MoviesRow\n        title={\"Popular Movies\"}\n        handleAPI={requests.popularMovies}\n        setSearchTerm={setSearchTerm}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Top Rated Movies\"}\n        handleAPI={requests.topRatedMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Comedy Movies\"}\n        handleAPI={requests.comedyMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Action Movies\"}\n        handleAPI={requests.actionMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Romantic Movies\"}\n        handleAPI={requests.romanticMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Crime Movies\"}\n        handleAPI={requests.crimeMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Horror Movies\"}\n        handleAPI={requests.horrorMovies}\n      />\n      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Documentaries\"}\n        handleAPI={requests.documentaryMovies}\n      />\n            <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Adventure Movies\"}\n        handleAPI={requests.Adventuremovies}\n      />      <MoviesRow\n      setSearchTerm={setSearchTerm}\n      title={\"Animation Movies\"}\n      handleAPI={requests.AnimationMovies}\n    />      <MoviesRow\n    setSearchTerm={setSearchTerm}\n    title={\"Drama Movies\"}\n    handleAPI={requests.DramaMovies}\n  />      <MoviesRow\n  setSearchTerm={setSearchTerm}\n  title={\"Family Movies\"}\n  handleAPI={requests.FamilyMovies}\n/>      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Music Movies\"}\n        handleAPI={requests.MusicMovies}\n      />      <MoviesRow\n      setSearchTerm={setSearchTerm}\n      title={\"Mystery Movies\"}\n      handleAPI={requests.MysteryMovies}\n    />      <MoviesRow\n    setSearchTerm={setSearchTerm}\n    title={\"Thriller Movies\"}\n    handleAPI={requests.ThrillerMovies}\n  />      <MoviesRow\n  setSearchTerm={setSearchTerm}\n  title={\"War Movies\"}\n  handleAPI={requests.WarMovies}\n/>      <MoviesRow\n        setSearchTerm={setSearchTerm}\n        title={\"Western Movies\"}\n        handleAPI={requests.WesternMovies}\n      />\n    </div>\n  );\n}\n\nexport default Movies;\n"],"sourceRoot":""}